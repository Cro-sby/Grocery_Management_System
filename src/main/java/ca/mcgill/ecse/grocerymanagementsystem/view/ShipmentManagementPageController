package ca.mcgill.ecse.grocerymanagementsystem.view;

import ca.mcgill.ecse.grocerymanagementsystem.controller.GroceryStoreException;
import ca.mcgill.ecse.grocerymanagementsystem.controller.ShipmentController;
import ca.mcgill.ecse.grocerymanagementsystem.controller.ShipmentProcessingController;
import ca.mcgill.ecse.grocerymanagementsystem.controller.ItemController;
import ca.mcgill.ecse.grocerymanagementsystem.model.Shipment;
import ca.mcgill.ecse.grocerymanagementsystem.model.ShipmentItem;
import ca.mcgill.ecse.grocerymanagementsystem.model.Item;
import ca.mcgill.ecse.grocerymanagementsystem.controller.TOs.TOItem;
import ca.mcgill.ecse.grocerymanagementsystem.controller.TOs.TOShipment;
import ca.mcgill.ecse.grocerymanagementsystem.controller.TOs.TOShipmentItem;

import javafx.beans.property.ReadOnlyStringWrapper;
import javafx.collections.FXCollections;
import javafx.fxml.FXML;
import javafx.scene.control.*;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.layout.VBox;
import javafx.scene.text.Text;
import javafx.stage.Modality;
import javafx.stage.Stage;

import java.util.List;

public class ShipmentManagementPageController {

    public TextField createShipmentButton;
    public TextField deleteShipmentNumberInput;
    public TextField addItemShipmentNumberInput;
    public TextField addItemNameInput;
    public TextField updateQuantityShipmentNumberInput;
    public TextField updateQuantityItemNameInput;
    public TextField updateQuantityInput;
    public TextField receiveShipmentNumberInput;
    public ComboBox<String> itemDropdown;

    @FXML
    private TableView<TOShipment> shipmentTableView;
    @FXML
    private TableColumn<TOShipment, Integer> shipmentNumberColumn;
    @FXML
    private TableColumn<TOShipment, String> shipmentDateOrderedColumn;
    @FXML
    private TableView<TOShipmentItem> shipmentItemTableView;
    @FXML
    private TableColumn<TOShipmentItem, String> shipmentItemNameColumn;
    @FXML
    private TableColumn<TOShipmentItem, Integer> shipmentItemQuantityColumn;

    @FXML
    private void initialize() {
        // Configure Table Columns
        shipmentNumberColumn.setCellValueFactory(new PropertyValueFactory<>("shipmentNumber"));
        shipmentDateOrderedColumn.setCellValueFactory(new PropertyValueFactory<>("dateOrdered"));
        shipmentItemNameColumn.setCellValueFactory(new PropertyValueFactory<>("itemName"));
        shipmentItemQuantityColumn.setCellValueFactory(new PropertyValueFactory<>("quantity"));

        // Populate the item dropdown for easier selection
        populateItemDropdown();

        // Set up table selection listener to show shipment items when a shipment is selected
        shipmentTableView.getSelectionModel().selectedItemProperty().addListener((obs, oldSelection, newSelection) -> {
            if (newSelection != null) {
                loadShipmentItems(newSelection.getShipmentNumber());
            } else {
                shipmentItemTableView.getItems().clear();
            }
        });

        // Handle refresh events
        shipmentTableView.addEventHandler(GroceryStoreView.REFRESH, e -> {
            List<TOShipment> shipments = ShipmentController.getAllShipments();
            shipmentTableView.setItems(FXCollections.observableList(shipments));
        });
        GroceryStoreView.registerRefreshableNode(shipmentTableView);
    }

    public void handleCreateShipmentClick() {
        try {
            // Backend call
            ShipmentController.createShipment();
            
            // Success Actions
            GroceryStoreView.refresh();
        } catch (GroceryStoreException e) {
            ViewUtils.showErrorMessage(String.valueOf(e));
        }
    }

    public void handleDeleteShipmentClick() {
        try {
            int shipmentNumber = Integer.parseInt(deleteShipmentNumberInput.getText());
            
            // Backend call
            ShipmentController.deleteShipment(shipmentNumber);
            
            // Success Actions
            deleteShipmentNumberInput.setText("");
            GroceryStoreView.refresh();
        } catch (NumberFormatException e) {
            ViewUtils.showErrorMessage("Shipment number must be a valid integer.");
        } catch (GroceryStoreException e) {
            ViewUtils.showErrorMessage(String.valueOf(e));
        }
    }

    public void handleAddItemToShipmentClick() {
        try {
            int shipmentNumber = Integer.parseInt(addItemShipmentNumberInput.getText());
            String itemName = addItemNameInput.getText();
            
            // Backend call
            ShipmentController.addItemToShipment(shipmentNumber, itemName);
            
            // Success Actions
            addItemNameInput.setText("");
            GroceryStoreView.refresh();
        } catch (NumberFormatException e) {
            ViewUtils.showErrorMessage("Shipment number must be a valid integer.");
        } catch (GroceryStoreException e) {
            ViewUtils.showErrorMessage(String.valueOf(e));
        }
    }

    public void handleUpdateQuantityClick() {
        try {
            int shipmentNumber = Integer.parseInt(updateQuantityShipmentNumberInput.getText());
            String itemName = updateQuantityItemNameInput.getText();
            int quantity = Integer.parseInt(updateQuantityInput.getText());
            
            // Backend call
            ShipmentController.updateQuantityInShipment(shipmentNumber, itemName, quantity);
            
            // Success Actions
            updateQuantityInput.setText("");
            GroceryStoreView.refresh();
        } catch (NumberFormatException e) {
            ViewUtils.showErrorMessage("Shipment number and quantity must be valid integers.");
        } catch (GroceryStoreException e) {
            ViewUtils.showErrorMessage(String.valueOf(e));
        }
    }

    public void handleReceiveShipmentClick() {
        try {
            int shipmentNumber = Integer.parseInt(receiveShipmentNumberInput.getText());
            
            // Backend call
            ShipmentProcessingController.receiveShipment(shipmentNumber);
            
            // Success Actions
            receiveShipmentNumberInput.setText("");
            GroceryStoreView.refresh();
        } catch (NumberFormatException e) {
            ViewUtils.showErrorMessage("Shipment number must be a valid integer.");
        } catch (GroceryStoreException e) {
            ViewUtils.showErrorMessage(String.valueOf(e));
        }
    }

    public void handleItemDropdownSelection() {
        String selectedItem = itemDropdown.getSelectionModel().getSelectedItem();
        if (selectedItem != null) {
            // Set the selected item to the appropriate input field
            if (!isNullOrBlank(addItemShipmentNumberInput.getText())) {
                addItemNameInput.setText(selectedItem);
            } else if (!isNullOrBlank(updateQuantityShipmentNumberInput.getText())) {
                updateQuantityItemNameInput.setText(selectedItem);
            }
        }
    }

    /**
     * Loads shipment items for a specific shipment.
     */
    private void loadShipmentItems(int shipmentNumber) {
        try {
            // Get shipment items for the selected shipment
            List<TOShipmentItem> shipmentItemsList = ShipmentController.getShipmentItems(shipmentNumber);
            shipmentItemTableView.setItems(FXCollections.observableList(shipmentItemsList));
            shipmentItemTableView.refresh();
        } catch (Exception e) {
            ViewUtils.showErrorMessage("Error loading shipment items: " + e.getMessage());
        }
    }

    /**
     * Populates the item dropdown with all available items.
     */
    private void populateItemDropdown() {
        List<TOItem> items = ItemController.getAllItems();
        ObservableList<String> itemNames = FXCollections.observableArrayList();
        for (TOItem item : items) {
            itemNames.add(item.getName());
        }
        itemDropdown.setItems(itemNames);
    }

    /**
     * Utility method to check for null or blank strings.
     */
    private boolean isNullOrBlank(String str) {
        return str == null || str.trim().isEmpty();
    }

    public static class ViewUtils {
        public static void showErrorMessage(String message) {
            makePopupWindow("Error", message);
        }

        public static void makePopupWindow(String title, String message) {
            Stage dialog = new Stage();
            dialog.initModality(Modality.APPLICATION_MODAL);
            VBox dialogPane = new VBox();

            // create UI elements
            Text text = new Text(message);
            Button okButton = new Button("OK");
            okButton.setOnAction(a -> dialog.close());

            // display the popup window
            int innerPadding = 10; // inner padding/spacing
            int outerPadding = 100; // outer padding
            dialogPane.setSpacing(innerPadding);
            dialogPane.setAlignment(Pos.CENTER);
            dialogPane.setPadding(new Insets(innerPadding, innerPadding, innerPadding, innerPadding));
            dialogPane.getChildren().addAll(text, okButton);
            Scene dialogScene = new Scene(dialogPane, outerPadding + 5 * message.length(), outerPadding);
            dialog.setScene(dialogScene);
            dialog.setTitle(title);
            dialog.show();
        }
    }
}
